재귀함수를 쓰는 이유?
수학적으로 정의한 규칙을 그대로 코드로 옮긴것이기 때문.
점화식 스타일이나 분할정복의 알고리즘일 경우 재귀함수가 직관적이라 알고리즘을 코드로 옮기기 쉽다. = 빠른 구현이 가능하다. = 알고리즘 자체가 재귀적 표현이 자연스러운 경우
동작 확인 후 루프형식으로 변환하는 경우가 많다.
코드를 직관적으로 보기가 쉽다. = 가독성이 높다.
일반적인 루프식으로 표현하기 어려운 경우가 있다. (Quick Sort, 하노이의 탑)
변수 사용을 줄일 수 있다. => 프로그램에 오류가 생길 가능성이 줄어들고 프로그램이 맞다는 것을 확인하기가 쉬워진다. = 작성한 코드가 정확히 동작하는것을 증명하는것이 쉽다.

물론 단순한 경우에는 오히려 재귀 호출이 직관적으로 이해하기 더 어려울 수도 있습니다.
하지만 프로그램이 복잡해지면 mutable state를 가능한 한 피하는 것이 오류 없는 프로그램을 짜는 데에 중요한 원칙이 될 수 밖에 없습니다.
mutable state를 가능한 한 피하는 것은 변수의 수를 줄이는 것과 변수가 가질 수 있는 값의 종류 또는 범위를 정확히 제한하는 것이라고 생각하면 됩니다.
변수의 수를 줄이는 것은 재귀 호출이 도와주고, 변수가 가질 수 있는 값의 종류 또는 범위를 정확히 제한하는 것은 type system이 도와줍니다.


** 일반적으로 재귀로 구한 코드는 스택을 소비하기 때문에 루프보다 느리다.


참고> https://kldp.org/node/134556


